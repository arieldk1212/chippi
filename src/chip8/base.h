#ifndef BASE_H
#define BASE_H

#include <cstdint>

// typedef u_char unsigned char // unused

class Chip8 {
private:

public:
  uint8_t memory[4096];

  int16_t stack[16];
  const uint8_t fonts[80] = {
    0xF0, 0x90, 0x90, 0x90, 0xF0, // -> 0
    0x20, 0x60, 0x20, 0x20, 0x70, // -> 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // -> 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // -> 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // -> 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // -> 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // -> 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // -> 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // -> 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // -> 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // -> A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // -> B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // -> C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // -> D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // -> E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // -> F
    };
  int16_t I; // used so store addresses, most of the lower 12 buts are used..
  int8_t V[16]; // general registers for the emulator. V0-Vf

  // Not accessable from chip8 progams..
  int16_t PC; // program counter -> store the currently executing address
  int16_t SP; // stack pointer -> tompost level of the stack.

  uint8_t DT;
  uint8_t ST;

  const int16_t ROMTOP = 512;

  uint8_t key_pressed;

  uint32_t* display;

  Chip8();
  ~Chip8();

  // executes one instruction and updates the chip's state
  void step();
};

#endif